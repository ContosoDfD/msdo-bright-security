name: rescan-codescan-sarif-manual

on: workflow_dispatch

jobs:
  wait_for:
    name: Wait for any issues, gh-int + code_scanning_alerts on
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    container: node:16
    steps:
      - name: Scan Start
        id: start
        uses: NeuraLegion/run-scan@release
        with:
          api_token: ${{ secrets.BRIGHT_TOKEN}}
          hostname: app.brightsec.com
          name: Bright Scan - ${{ github.sha }}
          restart_scan: ${{ secrets.BRIGHT_SCANIDMULT}}
      - name: Wait for breakpoint
        id: wait
        uses: NeuraLegion/wait-for@release
        with:
          api_token:  ${{ secrets.BRIGHT_TOKEN }}
          hostname: app.brightsec.com
          scan: ${{ steps.start.outputs.id }}
          wait_for: high
          code_scanning_alerts: false
          github_token: ${{ secrets.KEY_GITHUB }}
          timeout: 600
      - name: Download SARIF file
        id: sarif
        env:
          api_token: ${{ secrets.BRIGHT_TOKEN }}
          scanId: ${{ steps.start.outputs.id }}
        run: |
          echo Downloading sarif report
          curl -X GET "https://app.brightsec.com/api/v1/scans/$scanId/reports/sarif" -H "Authorization: Api-Key $api_token" -o bright.sarif.gz
          gzip -d bright.sarif.gz
          sarifFileText=$(cat bright.sarif)
          echo "sarif file text: $sarifFileText"
      - name: Upload SARIF file - No GHAS
        uses: actions/upload-artifact@v4
        with: 
          name: BrightSecurity_Report_${{ github.run_id }}
          path: bright.sarif
      - name: fetch-and-do-msdo-test
        shell: bash
        run: |
          curl -L -o ./msdo_linux.zip https://www.nuget.org/api/v2/package/Microsoft.Security.DevOps.Cli.linux-x64/
          unzip ./msdo_linux.zip
          chmod +x tools/guardian
          chmod +x tools/Microsoft.Guardian.Cli
          ls -lah .
          tools/guardian init --force
          tools/guardian upload -f bright.sarif
